{"ast":null,"code":"function validarCPF(cpf) {\n  // cpf = cpf.replace(/[^\\d]+/g,'');\t\n  if (cpf === '') return false;\n  // Elimina CPFs invalidos conhecidos\t\n  if (cpf.length !== 11 || cpf === \"00000000000\" || cpf === \"11111111111\" || cpf === \"22222222222\" || cpf === \"33333333333\" || cpf === \"44444444444\" || cpf === \"55555555555\" || cpf === \"66666666666\" || cpf === \"77777777777\" || cpf === \"88888888888\" || cpf === \"99999999999\") {\n    return false;\n  }\n\n  // Valida 1o digito\t\n  var add = 0;\n  for (var i = 0; i < 9; i++) add += parseInt(cpf.charAt(i)) * (10 - i);\n  var rev = 11 - add % 11;\n  if (rev === 10 || rev === 11) rev = 0;\n  if (rev !== parseInt(cpf.charAt(9))) return false;\n  // Valida 2o digito\t\n  add = 0;\n  for (var _i = 0; _i < 10; _i++) add += parseInt(cpf.charAt(_i)) * (11 - _i);\n  rev = 11 - add % 11;\n  if (rev === 10 || rev === 11) rev = 0;\n  if (rev !== parseInt(cpf.charAt(10))) return false;\n  return true;\n}\nexport default validarCPF;","map":{"version":3,"names":["validarCPF","cpf","length","add","i","parseInt","charAt","rev"],"sources":["/workspaces/DSM-G04-PI3-2023-1/src/components/CpfValidation.js"],"sourcesContent":["function validarCPF(cpf) {\t\n\t\t// cpf = cpf.replace(/[^\\d]+/g,'');\t\n\t\tif(cpf === '') return false;\t\n\t\t// Elimina CPFs invalidos conhecidos\t\n\t\tif (cpf.length !== 11 || \n\t\t\tcpf === \"00000000000\" || \n\t\t\tcpf === \"11111111111\" || \n\t\t\tcpf === \"22222222222\" || \n\t\t\tcpf === \"33333333333\" || \n\t\t\tcpf === \"44444444444\" || \n\t\t\tcpf === \"55555555555\" || \n\t\t\tcpf === \"66666666666\" || \n\t\t\tcpf === \"77777777777\" || \n\t\t\tcpf === \"88888888888\" || \n\t\t\tcpf === \"99999999999\") {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\t\t\t\n\t\t// Valida 1o digito\t\n\t\tlet add = 0;\t\n\t\tfor (let i=0; i < 9; i ++)\t\t\n\t\t\tadd += parseInt(cpf.charAt(i)) * (10 - i);\t\n\t\t\tlet rev = 11 - (add % 11);\t\n\t\t\tif (rev === 10 || rev === 11)\t\t\n\t\t\t\trev = 0;\t\n\t\t\tif (rev !== parseInt(cpf.charAt(9)))\t\t\n\t\t\t\treturn false;\t\t\n\t\t// Valida 2o digito\t\n\t\tadd = 0;\t\n\t\tfor (let i = 0; i < 10; i ++)\t\t\n\t\t\tadd += parseInt(cpf.charAt(i)) * (11 - i);\t\n\t\trev = 11 - (add % 11);\t\n\t\tif (rev === 10 || rev === 11)\t\n\t\t\trev = 0;\t\n\t\tif (rev !== parseInt(cpf.charAt(10)))\n\t\t\treturn false;\t\t\n\t\treturn true;  \n}\n\nexport default validarCPF;"],"mappings":"AAAA,SAASA,UAAUA,CAACC,GAAG,EAAE;EACvB;EACA,IAAGA,GAAG,KAAK,EAAE,EAAE,OAAO,KAAK;EAC3B;EACA,IAAIA,GAAG,CAACC,MAAM,KAAK,EAAE,IACpBD,GAAG,KAAK,aAAa,IACrBA,GAAG,KAAK,aAAa,IACrBA,GAAG,KAAK,aAAa,IACrBA,GAAG,KAAK,aAAa,IACrBA,GAAG,KAAK,aAAa,IACrBA,GAAG,KAAK,aAAa,IACrBA,GAAG,KAAK,aAAa,IACrBA,GAAG,KAAK,aAAa,IACrBA,GAAG,KAAK,aAAa,IACrBA,GAAG,KAAK,aAAa,EAAE;IACtB,OAAO,KAAK;EACb;;EAED;EACA,IAAIE,GAAG,GAAG,CAAC;EACX,KAAK,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAG,EACxBD,GAAG,IAAIE,QAAQ,CAACJ,GAAG,CAACK,MAAM,CAACF,CAAC,CAAC,CAAC,IAAI,EAAE,GAAGA,CAAC,CAAC;EACzC,IAAIG,GAAG,GAAG,EAAE,GAAIJ,GAAG,GAAG,EAAG;EACzB,IAAII,GAAG,KAAK,EAAE,IAAIA,GAAG,KAAK,EAAE,EAC3BA,GAAG,GAAG,CAAC;EACR,IAAIA,GAAG,KAAKF,QAAQ,CAACJ,GAAG,CAACK,MAAM,CAAC,CAAC,CAAC,CAAC,EAClC,OAAO,KAAK;EACd;EACAH,GAAG,GAAG,CAAC;EACP,KAAK,IAAIC,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAG,EAAE,EAAEA,EAAC,EAAG,EAC3BD,GAAG,IAAIE,QAAQ,CAACJ,GAAG,CAACK,MAAM,CAACF,EAAC,CAAC,CAAC,IAAI,EAAE,GAAGA,EAAC,CAAC;EAC1CG,GAAG,GAAG,EAAE,GAAIJ,GAAG,GAAG,EAAG;EACrB,IAAII,GAAG,KAAK,EAAE,IAAIA,GAAG,KAAK,EAAE,EAC3BA,GAAG,GAAG,CAAC;EACR,IAAIA,GAAG,KAAKF,QAAQ,CAACJ,GAAG,CAACK,MAAM,CAAC,EAAE,CAAC,CAAC,EACnC,OAAO,KAAK;EACb,OAAO,IAAI;AACb;AAEA,eAAeN,UAAU"},"metadata":{},"sourceType":"module"}